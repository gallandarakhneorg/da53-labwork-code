/* BasicParser.java */
/* Generated By:JavaCC: Do not edit this line. BasicParser.java */
package fr.utbm.info.da53.lw2.parser;

import java.util.SortedMap;
import java.util.Map;
import java.util.List;
import java.util.TreeMap;
import java.util.ArrayList;

import fr.utbm.info.da53.lw2.type.*;
import fr.utbm.info.da53.lw2.context.*;
import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.error.*;
import fr.utbm.info.da53.lw2.syntaxtree.*;

public class BasicParser implements BasicParserConstants {

        private int basicLineNumber = 1;
        private final SymbolTable symbolTable = new SymbolTable();

        /** Replies the symbol table used by the parser.
	 * @return the symbol table.
	 */
        public SymbolTable getSymbolTable() {
                return this.symbolTable;
        }

        /** Run the lexer and the syntax analyzer.
	 * @return the syntax tree.
	 * @throw CompilerException
	 */
        public SortedMap<Integer,Statement> executeCompiler() throws CompilerException {
                try {
                        SortedMap<Integer,Statement> code = new TreeMap<Integer,Statement>();
                        this.symbolTable.clear();
                        statements(code);
                        return code;
                }
                catch(ParseException e) {
                        if (e.currentToken!=null) {
                                throw new CompilerException(CompilationErrorType.SYNTAX_ERROR,
                                                        e.currentToken.endLine, e);
                        }
                        else if (this.token!=null) {
                                throw new CompilerException(CompilationErrorType.SYNTAX_ERROR,
                                                        this.token.endLine,  e);
                        }
                        throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, e);
                }
                catch(TokenMgrError e) {
                        if (this.token!=null) {
                                throw new CompilerException(CompilationErrorType.ILLEGAL_CHARACTER,
                                                        this.token.endLine,  e);
                        }
                        throw new CompilerException(CompilationErrorType.INTERNAL_LEXER_ERROR, e);
                }
                catch(Throwable e) {
                        throw new CompilerException(CompilationErrorType.INTERNAL_ERROR, e);
                }
        }

  final private void statements(SortedMap<Integer,Statement> code) throws ParseException, CompilerException {
    line(code);
    statementsRecurs(code);

}

  final private void statementsRecurs(SortedMap<Integer,Statement> code) throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CR:{
      jj_consume_token(CR);
      line(code);
      statementsRecurs(code);

      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
}

  final private void line(Map<Integer,Statement> code) throws ParseException, CompilerException {Token t;
        AbstractStatementTreeNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      t = jj_consume_token(NUMBER);
      s = statement();
Integer currentLineNumber = NumberUtil.parseInt(t.image);
                                                                                                                                                  if (currentLineNumber==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.INVALID_LINE_NUMBER,
                                                                                                                                                                        t.beginLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (s!=null) {
                                                                                                                                                        code.put(       currentLineNumber,
                                                                                                                                                                                s);
                                                                                                                                                  }
                                                                                                                                                  this.basicLineNumber = currentLineNumber.intValue() + 1;
      break;
      }
    case PRINT:
    case IF:
    case GOTO:
    case WHILE:
    case FOR:
    case INPUT:
    case LET:
    case GOSUB:
    case RETURN:
    case END:{
      s = statement();
if (s!=null) {
                                                                                                                                                        code.put(       this.basicLineNumber,
                                                                                                                                                                                s);
                                                                                                                                                  }
                                                                                                                                                  ++this.basicLineNumber;
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private AbstractStatementTreeNode statement() throws ParseException, CompilerException {Token t, t2, t3, t4;
        AbstractValueTreeNode value, e, l, r;
        AbstractStatementTreeNode s, s2;
        AbstractComparisonOperatorTreeNode o;
        List<VariableName> ids;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      t = jj_consume_token(PRINT);
      value = expression();
{if ("" != null) return new PrintTreeNode(value);}
      break;
      }
    case IF:{
      t = jj_consume_token(IF);
      l = expression();
      o = relop();
      r = expression();
      t2 = jj_consume_token(THEN);
      s = statement();
      s2 = elseStatement();
if (o==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_COMPARISON_OPERATOR,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (l==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        o.getOperatorString());}
                                                                                                                                                  }
                                                                                                                                                  if (r==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t2.endLine,
                                                                                                                                                                        o.getOperatorString());}
                                                                                                                                                  }
                                                                                                                                                  o.setOperands(l,r);
                                                                                                                                                  if (s==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.NO_STATEMENT_IN_THEN_BLOCK,
                                                                                                                                                                                t2.endLine,
                                                                                                                                                                                t2.image));
                                                                                                                                                    {if ("" != null) return null;}
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return new IfThenTreeNode(o, s, s2);}
      break;
      }
    case WHILE:{
      t = jj_consume_token(WHILE);
      l = expression();
      o = relop();
      r = expression();
      t2 = jj_consume_token(DO);
      s = statement();
      jj_consume_token(WEND);
if (o==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_COMPARISON_OPERATOR,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (l==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        o.getOperatorString());}
                                                                                                                                                  }
                                                                                                                                                  if (r==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t2.endLine,
                                                                                                                                                                        o.getOperatorString());}
                                                                                                                                                  }
                                                                                                                                                  o.setOperands(l,r);
                                                                                                                                                  if (s==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.NO_STATEMENT_IN_WHILE_BLOCK,
                                                                                                                                                                                t2.endLine,
                                                                                                                                                                                t2.image));
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return new WhileTreeNode(o, s);}
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      t = jj_consume_token(IDENTIFIER);
      t3 = jj_consume_token(40);
      l = expression();
      t4 = jj_consume_token(TO);
      r = expression();
      e = forStep();
      s = statement();
      jj_consume_token(NEXT);
      t2 = jj_consume_token(IDENTIFIER);
if (s==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.NO_STATEMENT_IN_FOR_BLOCK,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image));
                                                                                                                                                  }
                                                                                                                                                  if (!t.image.equals(t2.image)) {
                                                                                                                                                        {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.NOT_SAME_FOR_NEXT_IDENTIFIERS,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image+"!="+t2.image);}
                                                                                                                                                  }
                                                                                                                                                  if (l==null) {
                                                                                                                                                        {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t3.endLine,
                                                                                                                                                                                t3.image);}
                                                                                                                                                  }
                                                                                                                                                  if (r==null) {
                                                                                                                                                        {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t4.endLine,
                                                                                                                                                                                t4.image);}
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return new ForTreeNode(t.image, l, r, e, s);}
      break;
      }
    case GOTO:{
      t = jj_consume_token(GOTO);
      e = expression();
if (e==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image));
                                                                                                                                                    {if ("" != null) return null;}
                                                                                                                                                  }
                                                                                                                                              {if ("" != null) return new GotoTreeNode(e);}
      break;
      }
    case INPUT:{
      jj_consume_token(INPUT);
      ids = var_list();
{if ("" != null) return new InputTreeNode(ids);}
      break;
      }
    case LET:{
      jj_consume_token(LET);
      t = jj_consume_token(IDENTIFIER);
      r = arrayIndex();
      t2 = jj_consume_token(40);
      e = expression();
this.symbolTable.declare(t.image,t.beginLine);
                                                                                                                                                  if (e==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t2.endLine,
                                                                                                                                                                                t2.image));
                                                                                                                                                  }
                                                                                                                                              {if ("" != null) return new AssignmentTreeNode(new VariableName(t.image,r), e);}
      break;
      }
    case GOSUB:{
      t = jj_consume_token(GOSUB);
      e = expression();
if (e==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image));
                                                                                                                                                                {if ("" != null) return null;}
                                                                                                                                                  }
                                                                                                                                              {if ("" != null) return new GosubTreeNode(e);}
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
{if ("" != null) return new ReturnTreeNode();}
      break;
      }
    case END:{
      jj_consume_token(END);
{if ("" != null) return new EndTreeNode();}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractStatementTreeNode elseStatement() throws ParseException, CompilerException {AbstractStatementTreeNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      s = statement();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode forStep() throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STEP:{
      t = jj_consume_token(STEP);
      e = expression();
if (e==null) {
                                                                                                                                                        ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image));
                                                                                                                                                    {if ("" != null) return null;}
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractComparisonOperatorTreeNode relop() throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIFF:{
      jj_consume_token(DIFF);
{if ("" != null) return new NotEqualTreeNode();}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return new LowerEqualTreeNode();}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return new GreaterEqualTreeNode();}
      break;
      }
    case 40:{
      jj_consume_token(40);
{if ("" != null) return new EqualTreeNode();}
      break;
      }
    case 41:{
      jj_consume_token(41);
{if ("" != null) return new LowerThanTreeNode();}
      break;
      }
    case 42:{
      jj_consume_token(42);
{if ("" != null) return new GreaterThanTreeNode();}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private List<VariableName> var_list() throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode e;
        List<VariableName> theList = new ArrayList<VariableName>();
    t = jj_consume_token(IDENTIFIER);
    e = arrayIndex();
this.symbolTable.declare(t.image,t.beginLine);
                                                                                                                                                  theList.add(new VariableName(t.image, e));
    var_list_opt(theList);
{if ("" != null) return theList;}
    throw new Error("Missing return statement in function");
}

  final private void var_list_opt(List<VariableName> theList) throws ParseException, CompilerException {AbstractValueTreeNode e;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      jj_consume_token(43);
      t = jj_consume_token(IDENTIFIER);
      e = arrayIndex();
this.symbolTable.declare(t.image,t.beginLine);
                                                                                                                                                  theList.add(new VariableName(t.image, e));
      var_list_opt(theList);
      break;
      }
    default:
      jj_la1[6] = jj_gen;

    }
}

  final private AbstractValueTreeNode expression() throws ParseException, CompilerException {AbstractValueTreeNode leftOperand, result;
    leftOperand = term1();
    result = expressionRecurs(leftOperand);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode expressionRecurs(AbstractValueTreeNode leftOperand) throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode rightOperand, left, result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      t = jj_consume_token(44);
      rightOperand = term1();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "+");}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "+");}
                                                                                                                                                  }
                                                                                                                                                  left = new AdditionTreeNode(leftOperand, rightOperand);
      result = expressionRecurs(left);
{if ("" != null) return result;}
      break;
      }
    case 45:{
      t = jj_consume_token(45);
      rightOperand = term1();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "-");}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "-");}
                                                                                                                                                  }
                                                                                                                                                  left = new SubstractionTreeNode(leftOperand, rightOperand);
      result = expressionRecurs(left);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
{if ("" != null) return leftOperand;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode term1() throws ParseException, CompilerException {AbstractValueTreeNode leftOperand, result;
    leftOperand = term2();
    result = term1Recurs(leftOperand);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode term1Recurs(AbstractValueTreeNode leftOperand) throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode rightOperand, left, result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 46:{
      t = jj_consume_token(46);
      rightOperand = term2();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "*");}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "*");}
                                                                                                                                                  }
                                                                                                                                                  left = new MultiplicationTreeNode(leftOperand, rightOperand);
      result = term1Recurs(left);
{if ("" != null) return result;}
      break;
      }
    case 47:{
      t = jj_consume_token(47);
      rightOperand = term2();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "/");}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        "/");}
                                                                                                                                                  }
                                                                                                                                                  left = new DivisionTreeNode(leftOperand, rightOperand);
      result = term1Recurs(left);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return leftOperand;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode term2() throws ParseException, CompilerException {AbstractValueTreeNode leftOperand, result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case STRING:
    case TRUE:
    case FALSE:
    case NOT:
    case UNDEF:
    case IDENTIFIER:
    case 48:{
      leftOperand = factor();
      result = term2Recurs(leftOperand);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode term2Recurs(AbstractValueTreeNode leftOperand) throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode rightOperand, left, result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      t = jj_consume_token(AND);
      rightOperand = factor();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  left = new BooleanAndTreeNode(leftOperand, rightOperand);
      result = term2Recurs(left);
{if ("" != null) return result;}
      break;
      }
    case OR:{
      t = jj_consume_token(OR);
      rightOperand = factor();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  left = new BooleanOrTreeNode(leftOperand, rightOperand);
      result = term2Recurs(left);
{if ("" != null) return result;}
      break;
      }
    case XOR:{
      t = jj_consume_token(XOR);
      rightOperand = factor();
if (leftOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_LEFT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  if (rightOperand==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  left = new BooleanXorTreeNode(leftOperand, rightOperand);
      result = term2Recurs(left);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
{if ("" != null) return leftOperand;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode factor() throws ParseException, CompilerException {AbstractValueTreeNode value;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 48:{
      t = jj_consume_token(48);
      value = expression();
      jj_consume_token(49);
if (value==null) {
                                                                                                                                                    ErrorRepository.add(new CompilerWarning(
                                                                                                                                                                CompilationErrorType.EXPECTING_EXPRESSION,
                                                                                                                                                                                t.endLine,
                                                                                                                                                                                t.image));
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return value;}
      break;
      }
    case NOT:{
      t = jj_consume_token(NOT);
      value = expression();
if (value==null) {
                                                                                                                                                    {if (true) throw new CompilerException(
                                                                                                                                                                CompilationErrorType.EXPECTING_RIGHT_OPERAND,
                                                                                                                                                                        t.endLine,
                                                                                                                                                                        t.image);}
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return new BooleanNotTreeNode(value);}
      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
{if ("" != null) return new NumberTreeNode(t.image, t.beginLine);}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new StringTreeNode(t.image, t.beginLine);}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new BooleanTreeNode(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new BooleanTreeNode(false);}
      break;
      }
    case UNDEF:{
      jj_consume_token(UNDEF);
{if ("" != null) return new UndefTreeNode();}
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      value = arrayIndex();
this.symbolTable.declare(t.image,t.beginLine);
                                                                                                                                                  if (value==null) {
                                                                                                                                                        {if ("" != null) return new VariableTreeNode(t.image);}
                                                                                                                                                  }
                                                                                                                                                  {if ("" != null) return new ArrayElementTreeNode(t.image, value);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode arrayIndex() throws ParseException, CompilerException {Token t;
        AbstractValueTreeNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 48:{
      jj_consume_token(48);
      e = expression();
      jj_consume_token(49);
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public BasicParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x7c4cc200,0x7c4cc000,0x20000,0x1000000,0x1c0,0x0,0x0,0x0,0x80002200,0x0,0x80002200,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x700,0x800,0x3000,0xc000,0x10071,0xe,0x10071,0x10000,};
	}

  /** Constructor with InputStream. */
  public BasicParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BasicParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicParser(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[50];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 13; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 50; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

/* 
 * $Id$
 * 
 * Copyright (c) 2012-2021 Stephane GALLAND.
 * 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.utbm.info.da53.lw2.error;

import java.io.IOException;
import java.io.PrintStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * This class permits to store the warnings and the exceptions
 * generated by the compiler.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
public class ErrorRepository {

	private static final List<Loggable> messages = new ArrayList<Loggable>();

	/** Add a message in the repository.
	 * 
	 * @param m
	 */
	public static void add(Loggable m) {
		synchronized(ErrorRepository.class) {
			messages.add(m);
		}
	}
	
	/** Replies if this repository has error.
	 * 
	 * @return <code>true</code> if an error or a warning is inside.
	 */
	public static boolean hasError() {
		synchronized(ErrorRepository.class) {
			return !messages.isEmpty();
		}
	}

	/** Clear the repository.
	 */
	public static void clear() {
		synchronized(ErrorRepository.class) {
			messages.clear();
		}
	}

	/** Print the content of the repository.
	 */
	public static void print() {
		print(System.err);
	}

	/** Print the content of the repository.
	 * @param stream
	 */
	public static void print(PrintStream stream) {
		synchronized(ErrorRepository.class) {
			try {
				for(Loggable l : messages) {
					l.print(stream);
				}
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/** Print an error message on the stream.
	 * <p>
	 * This function assumes that the type is a pattern
	 * compliant with {@link MessageFormat}.
	 * The line, and message will be passed
	 * as value parameter to {@link MessageFormat}.
	 * 
	 * @param stream is the output stream.
	 * @param type is the description of the type of the error.
	 * @param line is the error line.
	 * @param message is the error description.
	 * @param cause is the cause.
	 * @throws IOException
	 */
	public static void printError(PrintStream stream,
			String type, int line, String message,
			Throwable cause) throws IOException {
		String m = MessageFormat.format(type,
				Integer.valueOf(line),
				message);
		stream.print("ERROR:   "); //$NON-NLS-1$
		stream.println(m);
	}

	/** Print a warning message on the stream.
	 * <p>
	 * This function assumes that the type is a pattern
	 * compliant with {@link MessageFormat}.
	 * The line, and message will be passed
	 * as value parameter to {@link MessageFormat}.
	 * 
	 * @param stream is the output stream.
	 * @param type is the description of the type of the warning.
	 * @param line is the warning line.
	 * @param message is the warning description.
	 * @param cause is the cause.
	 * @throws IOException
	 */
	public static void printWarning(PrintStream stream,
			String type, int line, String message,
			Throwable cause) throws IOException {
		String m = MessageFormat.format(type,
				Integer.valueOf(line),
				message);
		stream.print("WARNING: "); //$NON-NLS-1$
		stream.println(m);
	}

}
